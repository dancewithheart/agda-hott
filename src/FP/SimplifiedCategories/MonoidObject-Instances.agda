{-# OPTIONS --without-K --exact-split --safe --no-unicode #-}

module FP.Categories.MonoidalCategory-Instances where

open import TypeTheory.Universes using (Type; ùë¢; usuc; Universe)
open import TypeTheory.SimpleTypes using (OneL; ZeroL; id; id'; _compose_; _andThen_)
open import HoTT.Identity-Types using (refl; _‚â°_)
open import FP.Abstractions.Bifunctor using (Bifunctor; BifunctorProduct; BifunctorEither; BifunctorThese)
open import FP.Categories.Category using (Category; CategoryFunction)
open import TypeTheory.Product using (_√ó_; √óassocLR; √óassocRL
  ; √óleft-id; √óid-left; √óright-id; √óid-right; √óbimap; _,,_)
open import TypeTheory.Sum using (_+_; +right-id; +left-id; +id-right; +id-left
  ; +assocLR; +assocRL)
open import FP.Categories.MonoidalCategory using (MonoidalCategory)

-- Monoidal Category instances
{-
triangleEquation-product : {A B : Type ùë¢}
  -> (fa : (A √ó OneL) √ó B)
  ->
  √óbimap √óright-id (id' B) fa
    ‚â°
  (√óbimap (id' A) √óleft-id compose √óassocLR) fa
triangleEquation-product {ùë¢} {A} {B} fa = {!   !}
-}

MonoidalCategoryTuple : MonoidalCategory {ùë¢} _√ó_
MonoidalCategoryTuple = record
  { isCategory       = CategoryFunction
  ; tensor           = BifunctorProduct
  ; I                = OneL
  ; associatorEq     = ( √óassocLR  ,, √óassocRL )
  ; leftUnitorEq     = ( √óleft-id  ,, √óid-left )
  ; rightUnitorEq    = ( √óright-id ,, √óid-right )
  ; triangleEquation = ?
  ; pentagonEquation = {!   !}
  }

MonoidalCategoryEither : MonoidalCategory {ùë¢} _+_
MonoidalCategoryEither = record
  { isCategory       = CategoryFunction
  ; tensor           = BifunctorEither
  ; I                = ZeroL
  ; associatorEq     = ( +assocLR  ,, +assocRL )
  ; leftUnitorEq     = ( +left-id  ,, +id-left )
  ; rightUnitorEq    = ( +right-id ,, +id-right )
  ; triangleEquation = {!   !}
  ; pentagonEquation = {!   !}
  }

  -- Monoid object instances

  MonoidObjectMonoid : Monoid -> MonoidObject {ùë¢} _√ó_
  MonoidObjectMonoid Mon = record
    { mc        = MonoidalCategoryTuple
    ; M         = {! Unit  !}
    ; moUnit    = {!   !}
    ; moCompose = {!   !}
    ; mo-associativity-law  = {!   !}
    ; mo-left-identity-law  = {!   !}
    ; mo-right-identity-law = {!   !}
    } where open Monoid Mon
