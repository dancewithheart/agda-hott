{-# OPTIONS --without-K --exact-split --safe --no-unicode #-}

module FP.Abstractions.Profunctors.Strong where

open import TypeTheory.Universes using (Type; ùë¢; usuc; Universe)
open import TypeTheory.SimpleTypes using (id; _compose_; _andThen_)
open import HoTT.Identity-Types using (refl; _‚â°_)
open import TypeTheory.Product using (_√ó_; √ó-comm; √óbimap)
open import FP.Abstractions.Profunctor
open import FP.Types using (Function)

-- Strong profunctor (Cartesian)
record Strong (_=>:_ : Type ùë¢ -> Type ùë¢ -> Type ùë¢) : Type (usuc ùë¢) where
  field
    isProfunctor : Profunctor _=>:_
    cFirst : forall {A B C : Type ùë¢}
        -> (A =>: B)
        -> (A √ó C) =>: (B √ó C)
    -- TODO laws
  -- derived operations
  open Profunctor isProfunctor
  cSecond : forall {A B C : Type ùë¢}
        -> (A =>: B)
        -> (C √ó A) =>: (C √ó B)
  cSecond = (dimap √ó-comm √ó-comm) compose cFirst

function-first : {A B C : Type ùë¢} -> Function A B -> Function (A √ó C) (B √ó C)
function-first f ac = √óbimap f id ac

StrongFunction : Strong {ùë¢} Function
StrongFunction = record
  { isProfunctor = ProfunctorFunction
  ; cFirst = function-first
  }
